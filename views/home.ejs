<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>KOzen</title>
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@24,400,0,0"
    />
    <style>
      /* importing fonts - poppins*/
      @import url("https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap");

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Poppins", sans-serif;
      }

      :root {
        /* Dark mode colors */
        --text-color: #e3e3e3;
        --subheading-color: #828282;
        --placeholder-color: #a6a6a6;
        --primary-color: #242424;
        --secondary-color: #383838;
        --secondary-hover-color: #444;
      }

      .light_mode {
        /* light mode colors */
        --text-color: #222;
        --subheading-color: #a0a0a0;
        --placeholder-color: #6c6c6c;
        --primary-color: #fff;
        --secondary-color: #e9eef6;
        --secondary-hover-color: #dbe1ea;
      }

      /* Background image shown only when header is visible */
      body::before {
        content: "";
        position: fixed;
        inset: 0;
        background-image: url("Images/bg.jpg"); /* 👈 Replace with your actual image path */
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-attachment: fixed;
        z-index: -1;
        transition: opacity 0.5s ease;
        opacity: 1;
      }

      /* When header is hidden (chat started), fade out background */
      body.hide-header::before {
        opacity: 0;
        pointer-events: none;
      }

      body {
        background: var(--primary-color);
      }

      .header,
      .typing-area {
        color: var(--text-color);
      }

      .header,
      .typing-form {
        max-width: 1000px;
        margin: 0 auto;
      }

      .header {
        margin-top: 7vh;
        padding: 1rem;
        /* display: none; */
      }

      body.hide-header .header {
        display: none;
        margin-top: 0;
      }

      .header :where(.title, .subtitle) {
        font-weight: 500;
        line-height: 3.6rem;
      }

      .header .title {
        font-size: 2.7rem;
        width: fit-content;
        background-clip: text;
        background: linear-gradient(to right, #4285f4, #d96570);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
      }

      .header .subtitle {
        color: var(--subheading-color);
        font-size: 2.4rem;
      }

      .suggestion-list {
     
        margin-top: 9.5vh;
        padding-left: 1vh;
        padding-top: 1vh;
        padding-bottom: 1vh;
        list-style: none;
        display: flex;
        gap: 1.25rem;
        overflow-x: auto;
        scrollbar-width: none;
      }

      .suggestion-list .suggestion {
        background: var(--secondary-color);
        border-radius: 0.75rem;
        padding: 1.25rem;
        cursor: pointer;
        width: 227px;
        flex-shrink: 0;
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        justify-content: space-between;
        height: 200px;

        transition: transform 0.3s ease;
      }

      .suggestion-list .suggestion:hover {
        background: var(--secondary-hover-color);
        border-radius: 0.75rem;
        transform: scale(1.05);
      }

      .suggestion-list .suggestion .text {
        font-weight: 400;
      }

      .suggestion-list .suggestion .icon {
        height: 42px;
        width: 42px;
        font-size: 1.3rem;
        margin-top: 2.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        background: var(--primary-color);
      }

      .chat-list {
        padding: 2rem 1rem 12rem;
        max-height: 100vh;
        overflow-y: auto;
        scrollbar-color: #999 transparent;
      }

      .chat-list .message.incoming {
        margin-top: 1.5rem;
      }

      .chat-list .message .message-content {
        display: flex;
        gap: 1.5rem;
        width: 100%;
        align-items: center;
      }

      .chat-list .message .avatar {
        width: 40px;
        height: 40px;
        object-fit: cover;
        border-radius: 50%;
        align-self: flex-start;
      }

      .chat-list .message.loading .avatar {
        animation: rotate 3s linear infinite;
      }

      @keyframes rotate {
        100% {
          transform: rotate(360deg);
        }
      }

      .chat-list .message .text {
        color: var(--text-color);
      }

      .chat-list .message .text {
        display: flex;
        flex-direction: column;
        gap: 0.2rem; /* Optional: you can even remove this line */
      }

      .chat-list .message .text.error {
        color: #e55865;
      }

      .chat-list .message.loading .text {
        display: none;
      }

      .chat-list .message .icon {
        height: 35px;
        width: 35px;
        display: flex;
        cursor: pointer;
        font-size: 1.25rem;
        margin-left: 3.5rem;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        color: var(--text-color);
        background: var(--secondary-color);
        visibility: hidden;
      }

      .chat-list .message:not(.loading):hover .icon:not(.hide) {
        visibility: visible;
      }

      .chat-list .message .icon:hover {
        background: var(--secondary-color);
      }

      .chat-list .loading-indicator {
        display: none;
        width: 100%;
        gap: 0.8rem;
        flex-direction: column;
      }

      .chat-list .message.loading .loading-indicator {
        display: flex;
      }

      .chat-list .loading-indicator .loading-bar {
        height: 11px;
        width: 100%;
        border-radius: 0.5rem;
        background: linear-gradient(
          to right,
          #4145ac,
          var(--primary-color),
          #3950c3
        );
        animation: animate 3s linear infinite;
      }

      .chat-list .loading-indicator .loading-bar:last-child {
        width: 70%;
      }

      @keyframes animate {
        0% {
          background-position: -800px 0;
        }

        100% {
          background-position: 800px 0;
        }
      }

      .typing-area {
        position: fixed;
        width: 100%;
        bottom: 0;
        padding: 1rem;
        background: var(--primary-color);
      }

      .typing-area :where(.typing-form, .action-buttons) {
        display: flex;
        gap: 0.75rem;
      }

      .typing-area .input-wrapper {
        height: 56px;
        width: 100%;
        display: flex;
        position: relative;
      }

      .typing-area .typing-input {
        width: 100%;
        height: 100%;
        border: none;
        outline: none;
        font-size: 1rem;
        color: var(--text-color);
        border-radius: 6.2rem;
        padding: 1.1rem 4rem 1.1rem 1.5rem;
        background: var(--secondary-color);
      }

      .typing-area .typing-input:focus {
        background: var(--secondary-hover-color);
      }

      .typing-area .typing-input::placeholder {
        color: var(--placeholder-color);
      }

      .typing-area .icon {
        height: 56px;
        width: 56px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        background: var(--secondary-color);
      }

      .typing-area .icon:hover {
        background: var(--secondary-hover-color) !important;
      }

      .typing-area .input-wrapper .icon {
        position: absolute;
        right: 0;
        outline: none;
        border: none;
        background: none;
        color: var(--text-color);
        transform: scale(0);
        transition: transform 0.2s ease;
      }

      .typing-area .input-wrapper .typing-input:valid ~ .icon {
        transform: scale(1);
      }

      .typing-area .disclaimer-text {
        font-size: 0.85rem;
        margin-top: 1rem;
        text-align: center;
        color: var(--placeholder-color);
      }

      /* Responsive media query code for small screen */
      @media (max-width: 768px) {
        .header :is(.title, .subtitle) {
          font-size: 2rem;
          line-height: 2.6rem;
        }

        .header .subtitle {
          font-size: 1.7rem;
        }

        .chat-list .message .avatar {
          width: 37px;
          height: 37px;
        }

        .typing-area :where(.typing-form, .actions-button) {
          gap: 0.4rem;
        }

        .typing-form .input-wrapper {
          height: 50px;
        }

        .typing-form .typing-input {
          padding: 1.1rem 3.5rem 1.1rem 1.2rem;
        }

        .typing-area .icon {
          height: 50px;
          width: 50px;
        }

        .typing-area .disclaimer-text {
          font-size: 0.75rem;
          margin-top: 0.5rem;
        }
      }
      /* Hamburger menu icon */
      .hamburger {
        position: absolute;
        top: 2.5rem;
        right: 2.5rem;
        z-index: 1002;
        background: none;
        border: none;
        cursor: pointer;
        display: flex;
        flex-direction: column;
        gap: 5px;
        width: 40px;
        height: 40px;
        align-items: center;
        justify-content: center;
      }
      .hamburger span {
        display: block;
        width: 28px;
        height: 4px;
        background: var(--text-color);
        border-radius: 2px;
        transition: 0.3s;
      }
      /* Sidebar styles */
      .dashboard-sidebar {
        position: fixed;
        top: 0;
        right: -320px;
        width: 320px;
        height: 100vh;
        background: var(--primary-color);
        color: var(--text-color);
        box-shadow: -2px 0 16px rgba(0,0,0,0.15);
        z-index: 1003;
        transition: right 0.3s cubic-bezier(0.4,0,0.2,1);
        display: flex;
        flex-direction: column;
        padding: 2rem 1.5rem;
      }
      .dashboard-sidebar.open {
        right: 0;
      }
      .dashboard-sidebar .close-btn {
        align-self: flex-end;
        background: none;
        border: none;
        font-size: 2rem;
        color: var(--text-color);
        cursor: pointer;
        margin-bottom: 2rem;
      }
      .dashboard-sidebar .username {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
      }
      /* Overlay styles */
      .sidebar-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0,0,0,0.3);
        z-index: 1002;
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.3s;
      }
      .sidebar-overlay.open {
        opacity: 1;
        pointer-events: auto;
      }
      @media (max-width: 400px) {
        .dashboard-sidebar {
          width: 90vw;
        }
      }
    </style>
  </head>
  <body>
    <!-- Hamburger menu icon -->
    <button class="hamburger" id="hamburger-menu" aria-label="Open dashboard">
      <span></span>
      <span></span>
      <span></span>
    </button>
    <!-- Sidebar overlay -->
    <div class="sidebar-overlay" id="sidebar-overlay"></div>
    <!-- Dashboard Sidebar -->
    <aside class="dashboard-sidebar" id="dashboard-sidebar">
      <button class="close-btn" id="close-sidebar" aria-label="Close dashboard">&times;</button>
      <div class="username">
        <span>👤</span> <%= username ? username : "Guest" %>
      </div>
      <!-- Add more dashboard content here -->
      <div style="margin-top:2rem; color:var(--subheading-color); font-size:1rem;">Welcome to your dashboard!</div>
    </aside>
    <header class="header">
      <!-- Header Section -->
      <h2 class="title">
        Hello, <% if (username) { %>
        <%= username %> 
        <% } else { %>
         Guest
        <% } %>
      </h2>
      <h3 class="subtitle">How can I help you today?</h3>

      <!-- Suggestion list -->
      <ul class="suggestion-list">
        <li class="suggestion">
          <h4 class="text">Help me to set a reminder of 5 am.</h4>
          <span class="icon material-symbols-rounded">draw</span>
        </li>
        <li class="suggestion">
          <h4 class="text">How will be the weather tomorrow?</h4>
          <span class="icon material-symbols-rounded">weather_hail</span>
        </li>
        <li class="suggestion">
          <h4 class="text">
            What are the best tips to enhance my public speaking skills?
          </h4>
          <span class="icon material-symbols-rounded">emoji_objects</span>
        </li>
        <li class="suggestion">
          <h4 class="text">Can you help in finding the latest news on AI?</h4>
          <span class="icon material-symbols-rounded">news</span>
        </li>
      </ul>
    </header>

    <!-- Chat List / Container -->
    <div class="chat-list">
      <!-- Messages will be dynamically appended using JavaScript -->
    </div>

    <!-- Typing Area -->
    <div class="typing-area">
      <form action="#" class="typing-form">
        <div class="input-wrapper">
          <input
            class="typing-input"
            placeholder="Enter a prompt here"
            type="text"
            required
          />
          <button class="icon material-symbols-rounded">send</button>
        </div>
        <div class="action-buttons">
          <span id="toggle-theme-button" class="icon material-symbols-rounded"
            >light_mode</span
          >
          <span id="delete-chat-button" class="icon material-symbols-rounded"
            >delete</span
          >
        </div>
      </form>
      <p class="disclaimer-text">
        Gemini may display inaccurate info, including about people, so double
        check its responses.
      </p>
    </div>

    <script>
      const typingForm = document.querySelector(".typing-form");
      const chatList = document.querySelector(".chat-list");
      const suggestions = document.querySelectorAll(
        ".suggestion-list .suggestion"
      );
      const toggleThemeButton = document.querySelector("#toggle-theme-button");
      const deleteChatButton = document.querySelector("#delete-chat-button");

      let userMessage = null;
      let isResponseGenerating = false;

      //API configuration - Now using secure backend endpoint
      const API_URL = `/api/chat`;

      const loadLocalStorageData = () => {
        const savedChats = localStorage.getItem("savedChats");
        const isLightMode = localStorage.getItem("themeColor") === "light_mode";

        //Apply the stored theme
        document.body.classList.toggle("light_mode", isLightMode);
        toggleThemeButton.innerText = isLightMode ? "dark_mode" : "light_mode";

        //Restore saved chats
        chatList.innerHTML = savedChats || "";

        document.body.classList.toggle("hide-header", savedChats);
        chatList.scrollTo(0, chatList.scrollHeight); //scroll to the bottom
      };

      loadLocalStorageData();

      //Create a new message element and return it
      const createMessageElement = (content, ...classes) => {
        const div = document.createElement("div");
        div.classList.add("message", ...classes);
        div.innerHTML = content;
        return div;
      };

      // Show typing effect by displaying words one by one
      const showTypingEffect = (text, textElement, incomingMessageDiv) => {
        const words = text.split(" ");
        let currentWordIndex = 0;

        const typingInterval = setInterval(() => {
          // Append each word to the text element with a space
          textElement.innerText +=
            (currentWordIndex === 0 ? "" : " ") + words[currentWordIndex++];
          incomingMessageDiv.querySelector(".icon").classList.add("hide");

          // if all words are displayed
          if (currentWordIndex === words.length) {
            clearInterval(typingInterval);
            isResponseGenerating = false;
            incomingMessageDiv.querySelector(".icon").classList.remove("hide");
            localStorage.setItem("savedChats", chatList.innerHTML); //Save chats to local Storage
          }
          chatList.scrollTo(0, chatList.scrollHeight); //Scroll to the bottom
        }, 75);
      };

      const generateAPIResponse = async (incomingMessageDiv) => {
        const textElement = incomingMessageDiv.querySelector(".text"); // Get text element

        // Send a POST request to the secure API endpoint
        try {
          console.log('🔍 Sending chat request:', userMessage);
          const response = await fetch(API_URL, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            credentials: 'same-origin', // Include session cookies
            body: JSON.stringify({
              message: userMessage
            }),
          });

          console.log('🔍 Response status:', response.status);
          const data = await response.json();
          console.log('🔍 Response data:', data);
          
          if (!response.ok) throw new Error(data.error || 'Request failed');

          // Get the API response text
          const apiResponse = data.response;
          showTypingEffect(apiResponse, textElement, incomingMessageDiv);
        } catch (error) {
          console.error('❌ Chat API error:', error);
          isResponseGenerating = false;
          textElement.innerText = error.message || 'Something went wrong. Please try again.';
          textElement.classList.add("error");
        } finally {
          incomingMessageDiv.classList.remove("loading");
        }
      };

      // Show a loading animation while waiting for the API response
      const showLoadingAnimation = () => {
        const html = `<div class="message-content">
                    <img src="/Images/logo.jpeg" alt="Chatbot Image" class="avatar">
                    <p class="text"></p>           
                    <div class="loading-indicator">
                        <div class="loading-bar"></div>
                        <div class="loading-bar"></div>
                        <div class="loading-bar"></div>
                    </div>
                </div>
                <span onclick="copyMessage(this)" class="icon material-symbols-rounded">content_copy</span>   `;

        const incomingMessageDiv = createMessageElement(
          html,
          "incoming",
          "loading"
        );
        chatList.appendChild(incomingMessageDiv);

        chatList.scrollTo(0, chatList.scrollHeight); //scroll to the bottom
        generateAPIResponse(incomingMessageDiv);
      };

      //copy message to the clipboard
      const copyMessage = (copyIcon) => {
        const messageText =
          copyIcon.parentElement.querySelector(".text").innerText;

        navigator.clipboard.writeText(messageText);
        copyIcon.innerText = "done"; //Show tick icon
        setTimeout(() => (copyIcon.innerText = "content_copy"), 1000); //Revert icon after 1 second
      };

      // Handle sending outgoing chat messages
      const handleOutgoingChat = () => {
        userMessage =
          typingForm.querySelector(".typing-input").value.trim() || userMessage;
        if (!userMessage || isResponseGenerating) return; //Exit if there's no message

        isResponseGenerating = true;

        const html = `<div class="message-content">
                  <img src="/Images/User.jpg" alt="User Image" class="avatar">
                  <p class="text"></p>
                </div>`;

        const outgoingMessageDiv = createMessageElement(html, "outgoing");
        outgoingMessageDiv.querySelector(".text").innerText = userMessage;
        chatList.appendChild(outgoingMessageDiv);

        typingForm.reset(); //Clear input field
        chatList.scrollTo(0, chatList.scrollHeight); //scroll to the bottom
        document.body.classList.add("hide-header"); //Hide the header once chat started
        setTimeout(showLoadingAnimation, 500); //Show loading animation after a delay
      };

      //Set userMessage and handle outgoing chat when a suggestion is clicked
      suggestions.forEach((suggestion) => {
        suggestion.addEventListener("click", () => {
          userMessage = suggestion.querySelector(".text").innerText;
          handleOutgoingChat();
        });
      });

      // Toggle between light and dark themes
      toggleThemeButton.addEventListener("click", () => {
        const isLightMode = document.body.classList.toggle("light_mode");
        localStorage.setItem(
          "themeColor",
          isLightMode ? "light_mode" : "dark_mode"
        );
        toggleThemeButton.innerText = isLightMode ? "dark_mode" : "light_mode";
      });

      deleteChatButton.addEventListener("click", () => {
        if (confirm("Are you sure you want to delete all the messages?")) {
          localStorage.removeItem("savedChats");
          loadLocalStorageData();
        }
      });

      //Prevent default form submission and handle outgoing chat
      typingForm.addEventListener("submit", (e) => {
        e.preventDefault();

        handleOutgoingChat();
      });

      // Sidebar/dashboard logic
      const hamburgerMenu = document.getElementById("hamburger-menu");
      const dashboardSidebar = document.getElementById("dashboard-sidebar");
      const sidebarOverlay = document.getElementById("sidebar-overlay");
      const closeSidebarBtn = document.getElementById("close-sidebar");

      function openSidebar() {
        dashboardSidebar.classList.add("open");
        sidebarOverlay.classList.add("open");
        document.body.style.overflow = "hidden";
      }
      function closeSidebar() {
        dashboardSidebar.classList.remove("open");
        sidebarOverlay.classList.remove("open");
        document.body.style.overflow = "";
      }
      hamburgerMenu.addEventListener("click", openSidebar);
      closeSidebarBtn.addEventListener("click", closeSidebar);
      sidebarOverlay.addEventListener("click", closeSidebar);
    </script>
  </body>
</html>
